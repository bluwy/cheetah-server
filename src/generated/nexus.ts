/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from '../context'

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CompanyCreateInput: {
    // input type
    alias: string // String!
    name: string // String!
  }
}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Company: {
    // root type
    alias: string // String!
    id: string // ID!
    name: string // String!
  }
  Mutation: {}
  Query: {}
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CompanyCreateInput: NexusGenInputs['CompanyCreateInput']
}

export interface NexusGenFieldTypes {
  Company: {
    // field return type
    alias: string // String!
    id: string // ID!
    name: string // String!
  }
  Mutation: {
    // field return type
    createCompany: NexusGenRootTypes['Company'] // Company!
    deleteCompany: boolean // Boolean!
  }
  Query: {
    // field return type
    companies: NexusGenRootTypes['Company'][] // [Company!]!
    company: NexusGenRootTypes['Company'] // Company!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCompany: {
      // args
      data: NexusGenInputs['CompanyCreateInput'] // CompanyCreateInput!
    }
    deleteCompany: {
      // args
      id: string // ID!
    }
  }
  Query: {
    company: {
      // args
      id: string // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Company' | 'Mutation' | 'Query'

export type NexusGenInputNames = 'CompanyCreateInput'

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: ctx.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
