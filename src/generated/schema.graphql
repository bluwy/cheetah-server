### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Action {
  id: ID!
  remarks: String!
}

input ActionCreateInput {
  remarks: String!
}

input ActionFilter {
  every: ActionWhereInput
  none: ActionWhereInput
  some: ActionWhereInput
}

input ActionUpdateInput {
  remarks: String
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  assignment: AssignmentWhereInput
  id: StringFilter
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  remarks: StringFilter
}

input ActionWhereUniqueInput {
  id: ID
}

type Admin {
  id: ID!
  privilege: AdminPrivilege!
  username: String!
}

input AdminCreateInput {
  password: String!
  privilege: AdminPrivilege!
  username: String!
}

type AdminLoginResponse {
  adminId: String!
  adminPrivilege: AdminPrivilege!
  token: String!
}

input AdminOrderByInput {
  hash: OrderByArg
  id: OrderByArg
  privilege: OrderByArg
  username: OrderByArg
}

enum AdminPrivilege {
  BASIC
  FULL
}

input AdminUpdateInput {
  username: String
}

type AdminVerifyTokenResponse {
  adminId: String!
  adminPrivilege: AdminPrivilege!
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  hash: StringFilter
  id: StringFilter
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  privilege: AdminPrivilege
  username: StringFilter
}

input AdminWhereUniqueInput {
  id: ID
  username: String
}

type Assignment {
  actions(after: ID, before: ID, first: Int, last: Int, skip: Int): [Action!]!
  address: String!
  checkIn: DateTime
  checkOut: DateTime
  expired: Boolean!
  id: ID!
  preferTime: DateTime
  staffPrimary: Staff!
  staffSecondary: Staff
  tasks(after: ID, before: ID, first: Int, last: Int, skip: Int): [Task!]!
}

input AssignmentCreateInput {
  address: String!
  preferTime: DateTime
  staffPrimary: StaffWhereUniqueInput!
  staffSecondary: StaffWhereUniqueInput
  tasks: [TaskCreateInput!]!
}

input AssignmentFilter {
  every: AssignmentWhereInput
  none: AssignmentWhereInput
  some: AssignmentWhereInput
}

input AssignmentUpdateInput {
  address: String
  checkIn: DateTime
  checkOut: DateTime
  preferTime: DateTime
  staffPrimary: StaffWhereUniqueInput
  staffSecondary: StaffWhereUniqueInput
}

input AssignmentWhereInput {
  actions: ActionFilter
  address: StringFilter
  AND: [AssignmentWhereInput!]
  checkIn: NullableDateTimeFilter
  checkOut: NullableDateTimeFilter
  expired: BooleanFilter
  id: StringFilter
  job: JobWhereInput
  NOT: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  preferTime: NullableDateTimeFilter
  staffPrimary: StaffWhereInput
  staffSecondary: StaffWhereInput
  tasks: TaskFilter
}

input AssignmentWhereUniqueInput {
  id: ID
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Company {
  alias: String!
  id: ID!
  name: String!
}

input CompanyCreateInput {
  alias: String!
  name: String!
}

input CompanyOrderByInput {
  alias: OrderByArg
  id: OrderByArg
  name: OrderByArg
}

input CompanyUpdateInput {
  alias: String
  name: String
}

input CompanyWhereInput {
  alias: StringFilter
  AND: [CompanyWhereInput!]
  customers: CustomerFilter
  id: StringFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  alias: String
  id: ID
  name: String
}

type Customer {
  active: Boolean!
  addresses: [String!]!
  code: String!
  companyBelong: Company!
  email: String
  id: ID!
  name: String!
  phoneNumber: String
  staffPrimary: Staff!
  staffSecondary: Staff
  temporary: Boolean!
}

input CustomerCreateInput {
  active: Boolean
  addresses: [String!]
  code: String!
  companyBelong: CompanyWhereUniqueInput!
  email: String
  name: String!
  phoneNumber: String
  staffPrimary: StaffWhereUniqueInput!
  staffSecondary: StaffWhereUniqueInput
  temporary: Boolean
}

input CustomerFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerOrderByInput {
  active: OrderByArg
  code: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  phoneNumber: OrderByArg
  temporary: OrderByArg
}

input CustomerUpdateInput {
  active: Boolean
  addresses: [String!]
  code: String
  companyBelong: CompanyWhereUniqueInput
  email: String
  name: String
  phoneNumber: String
  staffPrimary: StaffWhereUniqueInput
  staffSecondary: StaffWhereUniqueInput
  temporary: Boolean
}

input CustomerWhereInput {
  active: BooleanFilter
  AND: [CustomerWhereInput!]
  code: StringFilter
  companyBelong: CompanyWhereInput
  email: NullableStringFilter
  id: StringFilter
  jobs: JobFilter
  name: StringFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  phoneNumber: NullableStringFilter
  staffPrimary: StaffWhereInput
  staffSecondary: StaffWhereInput
  temporary: BooleanFilter
}

input CustomerWhereUniqueInput {
  code: String
  id: ID
  name: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Job {
  assignments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Assignment!]!
  code: String!
  customer: Customer!
  dateIssued: DateTime!
  id: ID!
  needsFollowUp: Boolean!
}

input JobCreateInput {
  address: String!
  customer: CustomerWhereUniqueInput!
  preferTime: DateTime
  staffPrimary: StaffWhereUniqueInput!
  staffSecondary: StaffWhereUniqueInput
  tasks: [TaskCreateInput!]!
}

input JobFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobOrderByInput {
  code: OrderByArg
  dateIssued: OrderByArg
  id: OrderByArg
  needsFollowUp: OrderByArg
}

input JobUpdateInput {
  customer: CustomerWhereUniqueInput
  needsFollowUp: Boolean
}

input JobWhereInput {
  AND: [JobWhereInput!]
  assignments: AssignmentFilter
  code: StringFilter
  customer: CustomerWhereInput
  dateIssued: DateTimeFilter
  id: StringFilter
  needsFollowUp: BooleanFilter
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
}

input JobWhereUniqueInput {
  code: String
  id: ID
}

type Mutation {
  createAction(assignmentWhere: AssignmentWhereUniqueInput!, data: ActionCreateInput!): Action!
  createAdmin(data: AdminCreateInput!): Admin!
  createAssignment(data: AssignmentCreateInput!, jobWhere: JobWhereUniqueInput!): Assignment!
  createCompany(data: CompanyCreateInput!): Company!
  createCustomer(data: CustomerCreateInput!): Customer!
  createJob(data: JobCreateInput!): Job!
  createStaff(data: StaffCreateInput!): Staff!
  createTask(assignmentWhere: AssignmentWhereUniqueInput!, data: TaskCreateInput!): Task!
  deleteAction(where: ActionWhereUniqueInput!): Boolean!
  deleteAdmin(where: AdminWhereUniqueInput!): Boolean!
  deleteCompany(where: CompanyWhereUniqueInput!): Boolean!
  deleteCustomer(where: CustomerWhereUniqueInput!): Boolean!
  deleteJob(where: JobWhereUniqueInput!): Boolean!
  deleteStaff(where: StaffWhereUniqueInput!): Boolean!
  deleteTask(where: TaskWhereUniqueInput!): Boolean!
  forgotAdminPassword(username: String!): Boolean!
  forgotStaffPassword(where: StaffWhereUniqueInput!): Boolean!
  loginAdmin(password: String!, username: String!): AdminLoginResponse!
  loginStaff(password: String!, username: String!): StaffLoginResponse!
  resetAdminPassword(newPassword: String!, token: String!): Boolean!
  resetStaffPassword(newPassword: String!, where: StaffWhereUniqueInput!): Boolean!
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateAdminPassword(newPassword: String!, oldPassword: String!, where: AdminWhereUniqueInput!): Boolean!
  updateAssignment(data: AssignmentUpdateInput!, where: AssignmentWhereUniqueInput!): Assignment!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job!
  updateStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(orderBy: AdminOrderByInput, where: AdminWhereInput): [Admin!]!
  companies(orderBy: CompanyOrderByInput, where: CompanyWhereInput): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
  customer(where: CustomerWhereUniqueInput!): Customer
  customerCount: Int!
  customers(after: ID, before: ID, first: Int, last: Int, orderBy: CustomerOrderByInput, skip: Int, where: CustomerWhereInput): [Customer!]!
  job(where: JobWhereUniqueInput!): Job
  jobCount: Int!
  jobs(after: ID, before: ID, first: Int, last: Int, orderBy: JobOrderByInput, skip: Int, where: JobWhereInput): [Job!]!
  staff(where: StaffWhereUniqueInput!): Staff
  staffs(orderBy: StaffOrderByInput, where: StaffWhereInput): [Staff!]!
  verifyAdminToken(token: String!): AdminVerifyTokenResponse
  verifyStaffToken(token: String!): StaffVerifyTokenResponse
}

type Staff {
  fullName: String!
  id: ID!
  passwordForgotten: Boolean!
  username: String!
}

input StaffCreateInput {
  fullName: String!
  password: String!
  username: String!
}

type StaffLoginResponse {
  staffId: String!
  token: String!
}

input StaffOrderByInput {
  fullName: OrderByArg
  hash: OrderByArg
  id: OrderByArg
  passwordForgotten: OrderByArg
  username: OrderByArg
}

input StaffUpdateInput {
  fullName: String
  username: String
}

type StaffVerifyTokenResponse {
  staffId: String!
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  assignmentPrimaries: CustomerFilter
  assignmentSecondaries: CustomerFilter
  customerPrimaries: AssignmentFilter
  customerSecondaries: AssignmentFilter
  fullName: StringFilter
  hash: StringFilter
  id: StringFilter
  NOT: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  passwordForgotten: BooleanFilter
  username: StringFilter
}

input StaffWhereUniqueInput {
  id: ID
  username: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  id: ID!
  remarks: String!
  type: TaskType!
}

input TaskCreateInput {
  remarks: String!
  type: TaskType!
}

input TaskFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

enum TaskType {
  COMPLAINT
  DELIVERY
  OTHERS
  SERVICE
  TRANSPORT
}

input TaskUpdateInput {
  done: Boolean
  remarks: String
  type: TaskType
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  assignment: AssignmentWhereInput
  done: BooleanFilter
  id: StringFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  remarks: StringFilter
  type: TaskType
}

input TaskWhereUniqueInput {
  id: ID
}
