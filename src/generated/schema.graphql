### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Action {
  createdAt: DateTime!
  id: ID!
  remarks: String!
  updatedAt: DateTime!
}

input ActionInput {
  id: ID
  remarks: String
}

type Admin {
  createdAt: DateTime!
  id: ID!
  privilege: AdminPrivilege!
  updatedAt: DateTime!
  username: String!
}

input AdminCreateInput {
  password: String!
  privilege: AdminPrivilege!
  username: String!
}

input AdminJobUpdateInput {
  address: String
  checkIn: DateTime
  checkOut: DateTime
  customerId: ID
  preferTime: DateTime
  staffPrimaryId: ID
  staffSecondaryId: ID
  state: JobState
}

input AdminOrderByInput {
  privilege: OrderByArg
  username: OrderByArg
}

enum AdminPrivilege {
  BASIC
  FULL
}

input AdminPrivilegeFilter {
  equals: AdminPrivilege
  in: [AdminPrivilege!]
  not: AdminPrivilege
  notIn: [AdminPrivilege!]
}

input AdminUpdateInput {
  username: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  privilege: AdminPrivilegeFilter
  username: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Company {
  alias: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input CompanyCreateInput {
  alias: String!
  name: String!
}

input CompanyOrderByInput {
  alias: OrderByArg
  name: OrderByArg
}

input CompanyWhereInput {
  alias: StringFilter
  AND: [CompanyWhereInput!]
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
}

type Customer {
  active: Boolean!
  addresses: [String!]!
  code: String!
  companyBelong: Company!
  createdAt: DateTime!
  email: String
  id: ID!
  name: String!
  phoneNumber: String
  staffPrimary: Staff!
  staffSecondary: Staff!
  updatedAt: DateTime!
}

input CustomerCreateInput {
  addresses: [String!]!
  code: String!
  companyBelongId: ID!
  email: String
  name: String!
  phoneNumber: String
  staffPrimaryId: ID!
  staffSecondaryId: ID
}

input CustomerOrderByInput {
  active: OrderByArg
  code: OrderByArg
  companyBelong: CompanyOrderByInput
  email: OrderByArg
  name: OrderByArg
  phoneNumber: OrderByArg
  staffPrimary: StaffOrderByInput
  staffSecondary: StaffOrderByInput
}

input CustomerUpdateInput {
  active: Boolean
  addresses: [String!]
  code: String
  companyBelongId: ID
  email: String
  name: String
  phoneNumber: String
  staffPrimaryId: ID
  staffSecondaryId: ID
}

input CustomerWhereInput {
  active: BooleanFilter
  AND: [CustomerWhereInput!]
  code: StringFilter
  companyBelong: CompanyWhereInput
  email: StringFilter
  name: StringFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  phoneNumber: StringFilter
  staffPrimary: StaffWhereInput
  staffSecondary: StaffWhereInput
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Job {
  actions: [Action!]!
  address: String!
  checkIn: DateTime
  checkOut: DateTime
  code: String!
  createdAt: DateTime!
  customer: Customer!
  id: ID!
  preferTime: DateTime
  staffPrimary: Staff!
  staffSecondary: Staff!
  state: JobState
  tasks: [Task!]!
  updatedAt: DateTime!
}

input JobCreateInput {
  address: String!
  customerId: ID!
  preferTime: DateTime
  staffPrimaryId: ID!
  staffSecondaryId: ID
  tasks: [TaskCreateInput!]!
}

input JobOrderByInput {
  address: OrderByArg
  checkIn: OrderByArg
  checkOut: OrderByArg
  code: OrderByArg
  customer: CustomerOrderByInput
  preferTime: OrderByArg
  staffPrimary: StaffOrderByInput
  staffSecondary: StaffOrderByInput
  state: OrderByArg
}

enum JobState {
  DONE
  EXPIRED
  FOLLOW_UP
  REVIEWED
}

input JobStateFilter {
  equals: JobState
  in: [JobState!]
  not: JobState
  notIn: [JobState!]
}

input JobWhereInput {
  address: StringFilter
  AND: [JobWhereInput!]
  checkIn: DateTimeFilter
  checkOut: DateTimeFilter
  code: StringFilter
  customer: CustomerWhereInput
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  preferTime: DateTimeFilter
  staffPrimary: StaffWhereInput
  staffSecondary: StaffWhereInput
  state: JobStateFilter
}

type Mutation {
  adminUpdateJob(data: AdminJobUpdateInput!, id: ID!): Job!
  createAdmin(data: AdminCreateInput!): Admin!
  createCompany(data: CompanyCreateInput!): Company!
  createCustomer(data: CustomerCreateInput!): Customer!
  createJob(data: JobCreateInput!): Job!
  createStaff(data: StaffCreateInput!): Staff!
  deleteAdmin(id: ID): Boolean!
  deleteCompany(id: ID!): Boolean!
  deleteCustomer(id: ID!): Boolean!
  deleteJob(id: ID!): Boolean!
  deleteStaff(id: ID): Boolean!
  loginAdmin(password: String!, username: String!): Boolean!
  loginStaff(deviceId: String!): Boolean!
  logoutAdmin: Boolean!
  logoutStaff: Boolean!
  pairStaff(deviceId: String!, username: String!): Boolean!
  reassignJob(data: ReassignJobInput!, jobCode: String!): ReassignJobResponse!
  resetAdminPassword(newPassword: String!, resetToken: String!): Boolean!
  resetStaffPairing(id: ID!): Boolean!
  sendAdminResetPasswordEmail(username: String!): Boolean!
  setActions(data: [ActionInput!]!, jobId: ID!): Boolean!
  setTasks(data: [TaskInput!]!, jobId: ID!): Boolean!
  setTasksDone(ids: [ID!]!): Boolean!
  staffUpdateJob(data: StaffJobUpdateInput!, id: ID!): Job!
  updateAdmin(data: AdminUpdateInput!, id: ID): Admin!
  updateAdminPassword(
    id: ID
    newPassword: String!
    oldPassword: String!
  ): Boolean!
  updateCustomer(data: CustomerUpdateInput!, id: ID!): Customer!
  updateStaff(data: StaffUpdateInput!, id: ID): Staff!
}

enum OrderByArg {
  ASC
  DESC
}

type Query {
  admin(id: ID): Admin!
  admins(orderBy: AdminOrderByInput, where: AdminWhereInput): [Admin!]!
  companies(orderBy: CompanyOrderByInput, where: CompanyWhereInput): [Company!]!
  company(id: ID!): Company!
  customer(id: ID!): Customer!
  customerCount(where: CustomerWhereInput): Int!
  customers(
    first: Int = 10
    orderBy: CustomerOrderByInput
    skip: Int = 0
    where: CustomerWhereInput
  ): [Customer!]!
  job(id: ID!): Job!
  jobCount(where: JobWhereInput): Int!
  jobs(
    first: Int = 10
    orderBy: JobOrderByInput
    skip: Int = 0
    where: JobWhereInput
  ): [Job!]!
  staff(id: ID): Staff!
  staffs(orderBy: StaffOrderByInput, where: StaffWhereInput): [Staff!]!
}

input ReassignJobInput {
  address: String!
  preferTime: DateTime
  staffPrimaryId: ID!
  staffSecondaryId: ID
  tasks: [TaskCreateInput!]!
}

type ReassignJobResponse {
  newJob: Job!
  oriJob: Job!
}

type Staff {
  active: Boolean!
  createdAt: DateTime!
  fullName: String!
  id: ID!
  paired: Boolean!
  updatedAt: DateTime!
  username: String!
}

input StaffCreateInput {
  fullName: String!
  username: String!
}

input StaffJobUpdateInput {
  checkIn: DateTime
  checkOut: DateTime
  state: JobState
}

input StaffOrderByInput {
  active: OrderByArg
  fullName: OrderByArg
  username: OrderByArg
}

input StaffUpdateInput {
  active: Boolean
  fullName: String
}

input StaffWhereInput {
  active: BooleanFilter
  AND: [StaffWhereInput!]
  fullName: StringFilter
  NOT: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  username: StringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  createdAt: DateTime!
  done: Boolean!
  id: ID!
  remarks: String!
  type: TaskType!
  updatedAt: DateTime!
}

input TaskCreateInput {
  remarks: String!
  type: TaskType!
}

input TaskInput {
  done: Boolean
  id: ID
  remarks: String
  type: TaskType
}

enum TaskType {
  COMPLAINT
  DELIVERY
  OTHERS
  SERVICE
  TRANSPORT
}

input TaskTypeFilter {
  equals: TaskType
  in: [TaskType!]
  not: TaskType
  notIn: [TaskType!]
}
