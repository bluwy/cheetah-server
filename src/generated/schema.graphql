### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Admin {
  id: ID!
  privilege: AdminPrivilege!
  username: String!
}

input AdminCreateInput {
  password: String!
  privilege: AdminPrivilege!
  username: String!
}

input AdminOrderByInput {
  privilege: OrderByArg
  username: OrderByArg
}

enum AdminPrivilege {
  BASIC
  FULL
}

input AdminPrivilegeFilter {
  equals: AdminPrivilege
  in: [AdminPrivilege!]
  not: AdminPrivilege
  notIn: [AdminPrivilege!]
}

input AdminUpdateInput {
  username: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  privilege: AdminPrivilegeFilter
  username: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Company {
  alias: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input CompanyCreateInput {
  alias: String!
  name: String!
}

input CompanyOrderByInput {
  alias: OrderByArg
  name: OrderByArg
}

input CompanyWhereInput {
  alias: StringFilter
  AND: [CompanyWhereInput!]
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  createCompany(data: CompanyCreateInput!): Company!
  deleteAdmin(id: ID!): Boolean!
  deleteCompany(id: ID!): Boolean!
  loginAdmin(password: String!, username: String!): Boolean!
  logoutAdmin: Boolean!
  resetAdminPassword(newPassword: String!, resetToken: String!): Boolean!
  sendAdminResetPasswordEmail(username: String!): Boolean!
  updateAdmin(data: AdminUpdateInput!): Admin!
  updateAdminPassword(newPassword: String!, oldPassword: String!): Boolean!
}

enum OrderByArg {
  ASC
  DESC
}

type Query {
  admin(id: ID!): Admin!
  admins(
    first: Int
    orderBy: AdminOrderByInput
    skip: Int
    where: AdminWhereInput
  ): [Admin!]!
  companies(
    first: Int
    orderBy: CompanyOrderByInput
    skip: Int
    where: CompanyWhereInput
  ): [Company!]!
  company(id: ID!): Company!
  thisAdmin: Admin!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
