datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator photon {
  provider = "photonjs"
}

model Admin {
  @@map("admin")
  id        String         @default(cuid()) @id
  username  String         @unique
  privilege AdminPrivilege @default(BASIC)
  hash      String
}

model Staff {
  @@map("staff")
  id                    String       @default(cuid()) @id
  username              String       @unique
  fullName              String       @map("full_name")
  hash                  String
  passwordForgotten     Boolean      @default(false) @map("password_forgotten")
  customerPrimaries     Customer[]   @relation("StaffPrimaryByCustomer")
  customerSecondaries   Customer[]   @relation("StaffSecondaryByCustomer")
  assignmentPrimaries   Assignment[] @relation("StaffPrimaryByAssignment")
  assignmentSecondaries Assignment[] @relation("StaffSecondaryByAssignment")
}

model Company {
  @@map("company")
  id    String @default(cuid()) @id
  name  String @unique
  alias String @unique
}

model Customer {
  @@map("customer")
  id             String   @default(cuid()) @id
  code           String   @unique
  name           String   @unique
  email          String?
  addresses      String[]
  phoneNumber    String?  @map("phone_number")
  companyBelong  Company  @map("company_belong")
  temporary      Boolean  @default(false)
  active         Boolean  @default(true)
  staffPrimary   Staff    @relation("StaffPrimaryByCustomer") @map("staff_primary")
  staffSecondary Staff?   @relation("StaffSecondaryByCustomer") @map("staff_secondary")
}

model Job {
  @@map("job")
  id            String       @default(cuid()) @id
  code          String       @unique
  dateIssued    DateTime     @default(now()) @map("date_issued")
  customer      Customer
  assignments   Assignment[]
  needsFollowUp Boolean      @default(false) @map("needs_follow_up")
}

model Assignment {
  @@map("assignment")
  id             String    @default(cuid()) @id
  address        String
  preferTime     DateTime? @map("prefer_time")
  checkIn        DateTime? @map("check_in")
  checkOut       DateTime? @map("check_out")
  expired        Boolean   @default(false)
  staffPrimary   Staff     @relation("StaffPrimaryByAssignment") @map("staff_primary")
  staffSecondary Staff?    @relation("StaffSecondaryByAssignment") @map("staff_secondary")
  tasks          Task[]
  actions        Action[]
  job            Job       @relation(onDelete: CASCADE)
}

model Task {
  @@map("task")
  id         String     @default(cuid()) @id
  type       TaskType
  remarks    String
  done       Boolean    @default(false)
  assignment Assignment @relation(onDelete: CASCADE)
}

model Action {
  @@map("action")
  id         String     @default(cuid()) @id
  remarks    String
  assignment Assignment @relation(onDelete: CASCADE)
}

enum AdminPrivilege {
  FULL
  BASIC
}

enum TaskType {
  SERVICE
  COMPLAINT
  DELIVERY
  TRANSPORT
  OTHERS
}