import Knex from 'knex'

function baseTableColumns(knex: Knex, t: Knex.CreateTableBuilder) {
  t.uuid('id').primary()
  t.dateTime('createdAt').notNullable().defaultTo(knex.raw('now()'))
  t.dateTime('updatedAt').notNullable().defaultTo(knex.raw('now()'))
}

export async function up(knex: Knex): Promise<void> {
  await knex.schema
    .createTable('Company', (t) => {
      baseTableColumns(knex, t)
      t.text('name').notNullable().unique()
      t.text('alias').notNullable().unique()
    })
    .createTable('Admin', (t) => {
      baseTableColumns(knex, t)
      t.text('username').notNullable().unique()
      t.text('hash').notNullable()
      t.text('privilege').notNullable()
    })
    .createTable('Staff', (t) => {
      baseTableColumns(knex, t)
      t.text('username').notNullable().unique()
      t.text('fullName').notNullable().unique()
      t.text('deviceId').unique()
      t.boolean('active').notNullable().defaultTo(true)
    })
    .createTable('Customer', (t) => {
      baseTableColumns(knex, t)
      t.text('code').notNullable().unique()
      t.text('name').notNullable().unique()
      t.boolean('active').notNullable().defaultTo(true)
      t.specificType('addresses', 'TEXT[]')
        .notNullable()
        .defaultTo(knex.raw(`'{}'`))
      t.text('email')
      t.text('phoneNumber')
      t.uuid('companyBelongId').notNullable()
      t.foreign('companyBelongId')
        .references('Company.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
      t.uuid('staffPrimaryId').notNullable()
      t.foreign('staffPrimaryId')
        .references('Staff.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
      t.uuid('staffSecondaryId')
      t.foreign('staffSecondaryId')
        .references('Staff.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
    })
    .createTable('Job', (t) => {
      baseTableColumns(knex, t)
      // Not unique for job reassignments
      t.text('code').notNullable()
      t.text('address').notNullable()
      t.dateTime('startDate').notNullable()
      t.dateTime('checkIn')
      t.dateTime('checkOut')
      t.string('state').notNullable().defaultTo('TODO')
      t.uuid('customerId').notNullable()
      t.foreign('customerId')
        .references('Customer.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
      t.uuid('staffPrimaryId').notNullable()
      t.foreign('staffPrimaryId')
        .references('Staff.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
      t.uuid('staffSecondaryId')
      t.foreign('staffSecondaryId')
        .references('Staff.id')
        .onUpdate('CASCADE')
        .onDelete('RESTRICT')
    })
    .createTable('Task', (t) => {
      baseTableColumns(knex, t)
      t.text('type').notNullable()
      t.text('remarks').notNullable()
      t.boolean('done').notNullable().defaultTo(false)
      t.uuid('jobId').notNullable()
      t.foreign('jobId')
        .references('Job.id')
        .onUpdate('CASCADE')
        .onDelete('CASCADE')
    })
    .createTable('Action', (t) => {
      baseTableColumns(knex, t)
      t.text('remarks').notNullable()
      t.uuid('jobId').notNullable()
      t.foreign('jobId')
        .references('Job.id')
        .onUpdate('CASCADE')
        .onDelete('CASCADE')
    })
}

export async function down(knex: Knex): Promise<void> {
  await knex.schema
    .dropTable('Action')
    .dropTable('Task')
    .dropTable('Job')
    .dropTable('Customer')
    .dropTable('Staff')
    .dropTable('Admin')
    .dropTable('Company')
}
